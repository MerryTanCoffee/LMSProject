package kr.or.ddit.chat.controller;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.RemoteEndpoint.Basic;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@ServerEndpoint(value="/studyChat.do/{studyCode}")
public class ChatWebSocket {
    
	private static final ConcurrentHashMap<String, Session> sessions = new ConcurrentHashMap<>();
	
//    private static final List<Session> sessionList=new ArrayList<Session>();;
    private static final Logger logger = LoggerFactory.getLogger(ChatWebSocket.class);
    public ChatWebSocket() {
    }
    
    @OnOpen
    public void onOpen(Session session, @PathParam(value = "studyCode") String studyCode) {
        logger.info("Open session id:"+session.getId());
        try {
            final Basic basic=session.getBasicRemote();
            basic.sendText("대화방에 들어오신것을 환영합니다</br> 접속시간 :");
        }catch (Exception e) {
            System.out.println(e.getMessage());
        }
        sessions.put(studyCode, session);
        log.info("접속한 studyCode: " + studyCode);
		log.info(studyCode + "의 session: " + session.getId());
    }
    
   
    private void sendAllSessionToMessage(Session self, String sender, String message, String imgSrc) {
    	
//        try {
//            for(Session session : ChatWebSocket.sessionList) {
//                if(!self.getId().equals(session.getId())) {
//                    session.getBasicRemote().sendText(sender+" : "+message+" : "+ imgSrc);
//                }
//         
//            }
//        }catch (Exception e) {
//            System.out.println(e.getMessage());
//        }
    	
    	  sessions.forEach((id, session) -> {
    		  if(!self.getId().equals(session.getId())) {
                try {
					session.getBasicRemote().sendText(sender+" : "+message+" : "+ imgSrc);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
    		  
//              if (session.isOpen()) {
//                  try {
//                      session.getBasicRemote().sendText(message);
//                  } catch (IOException e) {
//                      e.printStackTrace();
//                  }
//              }
          });
    }
    
   
    @OnMessage
    public void onMessage(String message,Session session) {
    	log.info("message" + message);
    	String imgSrc = message.split(",")[2];
    	String sender = message.split(",")[1];
    	message = message.split(",")[0];
    	log.info("sender" + sender);
    	log.info("message" + message);
    	log.info("imgSrc" + imgSrc);
    	
        logger.info("<나> : "+message + " : " + imgSrc);
        try {
            final Basic basic=session.getBasicRemote();
            basic.sendText("<나> : "+message + " : " + imgSrc);
        }catch (Exception e) {
            log.info(e.getMessage());
        }
        sendAllSessionToMessage(session, sender, message, imgSrc);
    }
    
    @OnError
    public void onError(Throwable e,Session session) {
        
    }
    
    @OnClose
    public void onClose(Session session) {
    	sessions.values().remove(session);
    	log.info("소켓 닫힘");
    	log.info("현재 소켓 참여 리스트 : " + sessions.toString());
        logger.info("Session "+session.getId()+" has ended");
        
    }
}
